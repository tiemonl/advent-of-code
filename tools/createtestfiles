#!/bin/bash
createtestfile() {
  local year=$1
  local day=$2
  local paddedDay=$(printf "%02d" $day)
  local type1=${3:-Any}
  local type2=${4:-Any}

  if [[ -z $year || -z $day ]]; then
    echo "Missing params."
    exit 1
  fi

  local puzzledir="years/$year/test/dev/garlicbread/aoc/y$year/"
  if [[ ! -e "$puzzledir" ]]; then
    mkdir -p "$puzzledir"
  fi

  local file="${puzzledir}Problem${paddedDay}Test.kt"
  if [[ -e $file ]]; then
    read -p "File exists: ${file}. Overwrite? (y/N) " -r overwrite
    [[ "$overwrite" =~ ^[yY]$ ]] || return 1
  fi

  echo "Creating test class: $file"
  echo "package dev.garlicbread.aoc.y${year}

import com.google.common.truth.Truth.assertThat
import dev.garlicbread.aoc.core.FileInputProvider
import dev.garlicbread.aoc.core.PuzzleMetadata
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test

@DisplayName(\"$year Day $day\")
internal class Problem${paddedDay}Test {

    val metadata = PuzzleMetadata(year = $year, day = $day)

    @Nested
    @DisplayName(\"Part 1\")
    inner class PartOne {
        @Test
        @DisplayName(\"Example Input 1\")
        fun \`Matches example 1\`() {
            val puzzle = Problem${paddedDay}(FileInputProvider(metadata, \"_1\"))
            val answer = puzzle.solvePartOne()
            assertThat(answer).isEqualTo(-1)
        }

        @Test
        @DisplayName(\"Actual Input\")
        fun \`Matches actual\`() {
            val puzzle = Problem${paddedDay}(FileInputProvider(metadata))
            val answer = puzzle.solvePartOne()
            assertThat(answer).isEqualTo(-1)
        }
    }

    @Nested
    @DisplayName(\"Part 2\")
    inner class PartTwo {
        @Test
        @DisplayName(\"Example Input 1\")
        fun \`Matches example 1\`() {
            val puzzle = Problem${paddedDay}(FileInputProvider(metadata, \"_1\"))
            val answer = puzzle.solvePartTwo()
            assertThat(answer).isEqualTo(-1)
        }

        @Test
        @DisplayName(\"Actual Input\")
        fun \`Matches actual\`() {
            val puzzle = Problem${paddedDay}(FileInputProvider(metadata))
            val answer = puzzle.solvePartTwo()
            assertThat(answer).isEqualTo(-1)
        }
    }
}" >"${file}"

  local inputfolder=input/$year/test/
  local inputfile="${inputfolder}input${day}_1.in"
  if [[ -e $inputfile ]]; then
    read -p "File exists: ${inputfile}. Overwrite? (y/N) " -r overwrite
    [[ "$overwrite" =~ ^[yY]$ ]] || return 1
  fi

  echo "Creating test input file: $inputfile"
  if [[ ! -d $inputfolder ]]; then
    mkdir "$inputfolder"
  fi
  touch "$inputfile"

  return $?
}